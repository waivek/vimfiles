
jersey

asdfasdfasdfasdfasf

jersey

-------------------------------

Problem 1: Change `honolulu` to `india`. Press DOT twice. UNDO. The highlighting 
           goes when it should still be there. This is because we trigger a 
           CursorMove event not via the DOT operator.

Solution: We seamlessly transition from matchadd() to :set hls highlighting and
          offload the responsibility of highlight toggle to cool.vim. This is 
          out of scope as after the overrides are removed, dotty is out of the
          picture.

Problem 2: Change `honolulu` to `india`. Press DOT. Go to the top of the file. 
           Press DOT. The dotty is fired correctly but highlighting is not set 
           until you press DOT again. This is because we have no way of 
           differentiating between a DOT repeat cgn outside of dotty and a 
           normal cw change.

Problem 3: Change `honolulu` to `india`. Press DOT. Go up. Highlight should be 
           turned off, but if you are on the 'a' of india, dotty thinks this
           is a CursorMove caused by the DOT operator and doesn’t remove the
           overrides.

Problem 4: Change first `honolulu` to `india`. 
           Press 'n'. Press DOT. 
           Change happens but the highlighting goes away.

honolulu
honolulu
honolulu
honolulu
honolulu
honolulu

-------------------------------

Count 1: quiz! C() 
Count 2: however! C() 
Count 3: however! C() 
Count 4: however! C() 
Count 5: however! C() 
Count 6: however! C() 
Count 7: however! C() 
Count 8: however! C() 
Count 9: however! C() 

" dog! C() | dog! C() | dog! C() | dog! C() | dog! C() | dog! C()
" cat! C() | cat! C() | cat! C() | cat! C() | cat! C() | cat! C()
" bird! C() | bird! C() | bird! C() | bird! C() | bird! C() | bird! C()

" uniq


" f A
" f B
"
" f A
" f B
"
" f A
" f B

red
blue
red
blue
red
blue


-------------------------------

Multiline Test Cases:

" keyword! A() | keyword! A() | keyword! A() | keyword! A() | keyword! A() | keyword! A() | keyword! A() | keyword! A() | keyword! A()
" keyword! B() | keyword! B() | keyword! B() | keyword! B() | keyword! B() | keyword! B() | keyword! B() | keyword! B() | keyword! B()
" keyword! C() | keyword! C() | keyword! C() | keyword! C() | keyword! C() | keyword! C() | keyword! C() | keyword! C() | keyword! C()
"              |              |              |              |              |              |              |              |             
" keyword! A() | keyword! A() | keyword! A() | keyword! A() | keyword! A() | keyword! A() | keyword! A() | keyword! A() | keyword! A()
" keyword! B() | keyword! B() | keyword! B() | keyword! B() | keyword! B() | keyword! B() | keyword! B() | keyword! B() | keyword! B()
" keyword! C() | keyword! C() | keyword! C() | keyword! C() | keyword! C() | keyword! C() | keyword! C() | keyword! C() | keyword! C()

" keyword! A() | keyword! A() | keyword! A() | keyword! A() | keyword! A() | keyword! A() | keyword! A() | keyword! A() | keyword! A()
" keyword! B() | keyword! B() | keyword! B() | keyword! B() | keyword! B() | keyword! B() | keyword! B() | keyword! B() | keyword! B()
" keyword! C() | keyword! C() | keyword! C() | keyword! C() | keyword! C() | keyword! C() | keyword! C() | keyword! C() | keyword! C()

" keyword! A() | keyword! A() | keyword! A() | keyword! A() | keyword! A() | keyword! A() | keyword! A() | keyword! A() | keyword! A()
" keyword! B() | keyword! B() | keyword! B() | keyword! B() | keyword! B() | keyword! B() | keyword! B() | keyword! B() | keyword! B()
" keyword! C() | keyword! C() | keyword! C() | keyword! C() | keyword! C() | keyword! C() | keyword! C() | keyword! C() | keyword! C()

" keyword! A() | keyword! A() | keyword! A() | keyword! A() | keyword! A() | keyword! A() | keyword! A() | keyword! A() | keyword! A()
" keyword! B() | keyword! B() | keyword! B() | keyword! B() | keyword! B() | keyword! B() | keyword! B() | keyword! B() | keyword! B()
" keyword! C() | keyword! C() | keyword! C() | keyword! C() | keyword! C() | keyword! C() | keyword! C() | keyword! C() | keyword! C()

" dog! C() | dog! C() | dog! C() | dog! C() | dog! C() | dog! C()
" cat! C() | cat! C() | cat! C() | cat! C() | cat! C() | cat! C()
" bird! C() | bird! C() | bird! C() | bird! C() | bird! C() | bird! C()



" f A
" f B
"
" f A
" f B
"
" f A
" f B


-------------------------------

[problem] : clear @/
          : change “B” to “word”
          : press ‘gs’ to turn /B to /\<B\>
          : press ‘n’
          : instead of going to line 3, it goes to line 2

[solution] we weren’t using `pattern_matches_entire_deleted_text` like we did
           in RepeatChange(), copy pasting those lines fixed the issue


    1 | let g:B = ""
    2 | function! GetBiggestCarb()
    3 |     let g:B = max
    4 |     GetBiggestCarb()
    5 |     let g:B = max
    6 | endfunction

-------------------------------

ab~cd | ab~cd

[problem] in the above case, using DOTTY was throwing an error in
CheckIfCursorMoveWasCausedByDotOperator(). the problem was we were doing 
`@/ =~ @"` without escaping the @" register. 

[solution] we now escape the @" register. the new line is:
@/ =~ s:String2Pattern(@")

-------------------------------

Press cgn on first 'function'. Press DOT. Undo twice. Press 0.  Highlighting
should be disabled, but stays enabled.

" span | function | function | function
" span | function | function | function

-------------------------------
change r'/' to r'\/'

intended behaviour, just unintuitive, as ending is same as deleted text

line 1: <span></span>
line 2: <span></span>
line 3: <span></span>

-------------------------------

[problem] debugging why using '?' vivek and going to first match then pressing
'.' was showing an errorhl even though functionality was preserved. 

[solution] this was becuase the +nextmatches -previousmatches message system
should have had a `:silent!` in its command.

line 1: vivek
line 2: vivek
line 3: vivek

-------------------------------
PATTERN: &nbsp;\ze\w

LINES:
<p>&nbsp;</p>
A long&nbsp;time ago
<p>&nbsp;</p>
New ways&nbsp;to see

PATTERN: 

pattern1: hello\zsworld, deleted_text: world
pattern2: hello\zeworld, deleted_text: hello

1,2: helloworld
  1: hello
  2: world
1,2: helloworld
  1: hello
  2: world

Elaboration: After deleting text, we lose context of the stuff before \zs or
after \ze when doing the match.

-------------------------------

var collapse_span = document.createElement("span");
collapse_span.innerHTML = collapse_svg;
collapse.

RepeatChange test cases:
→ / 'input'
→ c 'input$word'
→ .

@/        , @"            , dot behaviour , status
input     , input$word    , UPDATE        , PASS
range     , input_range   , UPDATE        , PASS
\<false\> , [false false] , UPDATE        , PASS
\<word\>  , word          , STAY          , PASS

CASE 1:
input$
input$word
input$
input$word

CASE 2: 
range
input_range
range
input_range

CASE 3: (previous search key after token)
false
[false false false]
false
[false false false]

CASE 4: (toggle keyword test)
word
word_item
word        word_item

word_item   word

-------------------------------
::
See whether it works with surround.vim
STEP 1 (SETUP):
Change the first trigger to something else. Press DOT
    news 1
    news 2
STEP 2:
Do the following command on word_1. 
    ysiw"
Move the cursor onto word_2. Press DOT.
    word_1
    word_2

